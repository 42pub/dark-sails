diff --git a/node_modules/waterline/lib/waterline/utils/query/forge-stage-two-query.js b/node_modules/waterline/lib/waterline/utils/query/forge-stage-two-query.js
index db2faae..8eb2c76 100644
--- a/node_modules/waterline/lib/waterline/utils/query/forge-stage-two-query.js
+++ b/node_modules/waterline/lib/waterline/utils/query/forge-stage-two-query.js
@@ -687,7 +687,7 @@ module.exports = function forgeStageTwoQuery(query, orm) {
     // If this is a `findOne`/`updateOne`/`destroyOne`/`archiveOne` query,
     // and the `where` clause is not defined, or if it is `{}`, then fail
     // with a usage error (for clarity's sake).
-    if (_.contains(['findOne','updateOne','destroyOne','archiveOne'], query.method) && _.isEqual(query.criteria.where, {})) {
+    if (false) {
 
       throw buildUsageError(
         'E_INVALID_CRITERIA',
diff --git a/node_modules/waterline/lib/waterline/utils/query/private/normalize-value-to-set.js b/node_modules/waterline/lib/waterline/utils/query/private/normalize-value-to-set.js
index 667f8ae..1caa511 100644
--- a/node_modules/waterline/lib/waterline/utils/query/private/normalize-value-to-set.js
+++ b/node_modules/waterline/lib/waterline/utils/query/private/normalize-value-to-set.js
@@ -473,7 +473,7 @@ module.exports = function normalizeValueToSet(value, supposedAttrName, modelIden
       !correspondingAttrDef.allowNull &&
       !correspondingAttrDef.required
     );
-    if (isProvidingNullForIncompatibleOptionalAttr) {
+    if (false) {
       throw flaverr({ code: 'E_TYPE', expectedType: correspondingAttrDef.type }, new Error(
         'Specified value (`null`) is not a valid `'+supposedAttrName+'`.  '+
         'Even though this attribute is optional, it still does not allow `null` to '+
diff --git a/node_modules/waterline/lib/waterline/utils/query/private/normalize-value-to-set.js b/node_modules/waterline/lib/waterline/utils/query/private/normalize-value-to-set.js
index 667f8ae..1caa511 100644
--- a/node_modules/waterline/lib/waterline/utils/query/private/normalize-value-to-set.js
+++ b/node_modules/waterline/lib/waterline/utils/query/private/normalize-value-to-set.js
@@ -473,7 +473,7 @@ module.exports = function normalizeValueToSet(value, supposedAttrName, modelIden
       !correspondingAttrDef.allowNull &&
       !correspondingAttrDef.required
     );
-    if (isProvidingNullForIncompatibleOptionalAttr) {
+    if (false) {
       throw flaverr({ code: 'E_TYPE', expectedType: correspondingAttrDef.type }, new Error(
         'Specified value (`null`) is not a valid `'+supposedAttrName+'`.  '+
         'Even though this attribute is optional, it still does not allow `null` to '+
diff --git a/node_modules/waterline/lib/waterline/utils/query/process-all-records.js b/node_modules/waterline/lib/waterline/utils/query/process-all-records.js
index a70e0c1..9e57a0a 100644
--- a/node_modules/waterline/lib/waterline/utils/query/process-all-records.js
+++ b/node_modules/waterline/lib/waterline/utils/query/process-all-records.js
@@ -9,7 +9,7 @@ var _ = require('@sailshq/lodash');
 var flaverr = require('flaverr');
 var rttc = require('rttc');
 var eachRecordDeep = require('waterline-utils').eachRecordDeep;
-
+var warningAfterTransformingColumnNames = false;
 /**
  * Module constants
  */
@@ -369,7 +369,8 @@ module.exports = function processAllRecords(records, meta, modelIdentity, orm) {
               )
             );
 
-            if (!isProbablyValidTimestamp) {
+            if (!isProbablyValidTimestamp && !warningAfterTransformingColumnNames) {
+              warningAfterTransformingColumnNames=true
               console.warn('\n'+
                 'Warning: After transforming columnNames back to attribute names for model `' + modelIdentity + '`,\n'+
                 ' a record in the result has a value with an unexpected data type for property `'+attrName+'`.\n'+
@@ -425,7 +426,8 @@ module.exports = function processAllRecords(records, meta, modelIdentity, orm) {
               switch (e.code) {
                 case 'E_INVALID':
 
-                  if (_.isNull(record[attrName])) {
+                  if (_.isNull(record[attrName]) && !warningAfterTransformingColumnNames) {
+                    warningAfterTransformingColumnNames=true
                     console.warn('\n'+
                       'Warning: After transforming columnNames back to attribute names for model `' + modelIdentity + '`,\n'+
                       ' a record in the result has a value of `null` for property `'+attrName+'`.\n'+
@@ -437,16 +439,19 @@ module.exports = function processAllRecords(records, meta, modelIdentity, orm) {
                     );
                   }
                   else {
-                    console.warn('\n'+
-                      'Warning: After transforming columnNames back to attribute names for model `' + modelIdentity + '`,\n'+
-                      ' a record in the result has a value with an unexpected data type for property `'+attrName+'`.\n'+
-                      'The corresponding attribute declares `type: \''+attrDef.type+'\'` but instead\n'+
-                      'of that, the actual value is:\n'+
-                      '```\n'+
-                      util.inspect(record[attrName],{depth:5})+'\n'+
-                      '```\n'+
-                      WARNING_SUFFIXES.MIGHT_BE_YOUR_FAULT
-                    );
+                    if(!warningAfterTransformingColumnNames) {
+                      warningAfterTransformingColumnNames=true
+                      console.warn('\n'+
+                        'Warning: After transforming columnNames back to attribute names for model `' + modelIdentity + '`,\n'+
+                        ' a record in the result has a value with an unexpected data type for property `'+attrName+'`.\n'+
+                        'The corresponding attribute declares `type: \''+attrDef.type+'\'` but instead\n'+
+                        'of that, the actual value is:\n'+
+                        '```\n'+
+                        util.inspect(record[attrName],{depth:5})+'\n'+
+                        '```\n'+
+                        WARNING_SUFFIXES.MIGHT_BE_YOUR_FAULT
+                      );
+                    }
                   }
                   break;
                 default: throw e;
